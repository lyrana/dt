# Make the Python module called particle_cartesian_..._solib

# Specify the particle spatial coordinate system:
#THE_PARTICLE_TYPE = cartesian_xyz
THE_PARTICLE_TYPE = cartesian_xy

THE_MODULE_PREFIX = particle_

THE_MODULE_NAME = $(THE_MODULE_PREFIX)$(THE_PARTICLE_TYPE)_solib

DFLAGS = -DPARTICLE_TYPE=$(THE_PARTICLE_TYPE) -DMODULE_NAME=$(THE_MODULE_NAME)

$(THE_MODULE_NAME).cpython-36m-x86_64-linux-gnu.so: particle_solib.cpp Pstruct.h SegmentedArrayPair.h particle.h ParticleMeshBoundaryConditions.h UserParticleBoundaryFunctions.h MeshEntityArrays.o dolfin_functions.o predicates.o
	c++ $(DFLAGS) -O3 -Wall -shared -std=c++11 -fPIC -fvisibility=hidden -I/usr/include/eigen3 `python3 -m pybind11 --includes` particle_solib.cpp MeshEntityArrays.o dolfin_functions.o predicates.o -o $@

# Particle_Module.py imports the segmented_array_pair_solib.so library, as well as particle_xxx_solib.so
SegmentedArrayPair.h:
	@echo "*Run Makefile.sap first*"
	@/bin/false

dolfin_functions.o: dolfin_functions.cpp dolfin_functions.h
	@echo "*Run Makefile.df first*"
	@/bin/false

predicates.o: predicates.cpp predicates.h
	@echo "*Run Makefile.df first*"
	@/bin/false

MeshEntityArrays.o: MeshEntityArrays.h MeshEntityArrays.cpp
	@echo "*Run Makefile.mea first*"
	@/bin/false

# p_pyb.cpython-36m-x86_64-linux-gnu.so: p_pyb.cpp particle.h
# 	c++ -O3 -Wall -shared -std=c++11 -fPIC -fvisibility=hidden -I/usr/include/eigen3 `python3 -m pybind11 --includes` p_pyb.cpp -o p_pyb`python3-config --extension-suffix`


#particle.o: particle.cpp particle.h SegmentedArrayPair.h Pstruct.h
#	c++ -c -O3 -Wall -std=c++11 -fPIC -fvisibility=hidden `python3 -m pybind11 --includes` particle.cpp -o particle.o

#test_segmented_arrays: test_segmented_arrays.cpp SegmentedArrayPair_Cpp.cpp
#	c++ -O0 -g -Wall -std=c++11 -fPIC -fvisibility=hidden `python3-config --cflags` test_segmented_arrays.cpp -o test_segmented_arrays `python3-config --ldflags`

clean:
	/bin/rm $(THE_MODULE_NAME).cpython-36m-x86_64-linux-gnu.so
