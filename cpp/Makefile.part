# Make the Python module called p_cpp_cartesian_x

PARTICLE_MODULE_PREFIX = p_cpp_

# Set the particle type here
#PARTICLE_TYPE = cartesian_x
#PARTICLE_TYPE = cartesian_xy

PARTICLE_TYPE = cartesian_xyz

PARTICLE_MODULE_NAME = $(PARTICLE_MODULE_PREFIX)$(PARTICLE_TYPE)

DFLAGS = -DPARTICLE_TYPE=$(PARTICLE_TYPE) -DPARTICLE_MODULE_NAME=$(PARTICLE_MODULE_NAME)

$(PARTICLE_MODULE_NAME).cpython-36m-x86_64-linux-gnu.so: Pstruct.h SegmentedArrayPair.h particle.h p_cpp.cpp dolfin_functions.o predicates.o
	c++ $(DFLAGS) -O3 -Wall -shared -std=c++11 -fPIC -fvisibility=hidden -I/usr/include/eigen3 `python3 -m pybind11 --includes` /home/tph/workspace/dt/dolfin_functions_cpp.so p_cpp.cpp dolfin_functions.o predicates.o -o $(PARTICLE_MODULE_NAME)`python3-config --extension-suffix`

# Particle_Module.py imports the segmentedarraypair_cpp.so library, as well as p_cpp.so
SegmentedArrayPair.h:
	@echo "*Run Makefile.sap first*"
	@/bin/false

dolfin_functions.o: dolfin_functions.cpp dolfin_functions.h
	@echo "*Run Makefile.df first*"
	@/bin/false

predicates.o: predicates.cpp predicates.h
	@echo "*Run Makefile.df first*"
	@/bin/false


# p_pyb.cpython-36m-x86_64-linux-gnu.so: p_pyb.cpp particle.h
# 	c++ -O3 -Wall -shared -std=c++11 -fPIC -fvisibility=hidden -I/usr/include/eigen3 `python3 -m pybind11 --includes` p_pyb.cpp -o p_pyb`python3-config --extension-suffix`


#particle.o: particle.cpp particle.h SegmentedArrayPair.h Pstruct.h
#	c++ -c -O3 -Wall -std=c++11 -fPIC -fvisibility=hidden `python3 -m pybind11 --includes` particle.cpp -o particle.o

#test_segmented_arrays: test_segmented_arrays.cpp SegmentedArrayPair_Cpp.cpp
#	c++ -O0 -g -Wall -std=c++11 -fPIC -fvisibility=hidden `python3-config --cflags` test_segmented_arrays.cpp -o test_segmented_arrays `python3-config --ldflags`

clean:
	/bin/rm *.so *.o
